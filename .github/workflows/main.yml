name: Spring Boot CI/CD

on:
  push:
    branches:
      - '**'  # Run on all branches
  pull_request:
    branches:
      - main

env:
  JAVA_VERSION: '17'  # Adjust to your Java version (11, 17, 21, etc.)
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  # This job runs on every push to any branch
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'gradle'  # Change to 'gradle' if using Gradle
      
      - name: Run unit tests
        run: ./gradlew test --tests '*' --exclude-tests '**/*IntegrationTest' --exclude-tests '**/*IT'  # Excludes integration tests
      
      - name: Generate test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Unit Test Results
          path: build/test-results/test/*.xml 
          reporter: java-junit
          fail-on-error: true

  # These jobs only run on pushes to main branch
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'gradle'
      
      - name: Build with Maven
        run: ./gradlew build -x test
        # For Gradle: 
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: build/libs/*.jar 
          retention-days: 7

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'gradle'
      
      - name: Run code quality checks
        run: mvn verify -DskipTests
        # This runs checkstyle, spotbugs, etc. if configured in your pom.xml
      
      # Optional: Add SonarCloud/SonarQube analysis
      # - name: SonarCloud Scan
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: mvn sonar:sonar

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'maven'
      
      - name: Run dependency check
        run: mvn dependency-check:check
        continue-on-error: true  # Don't fail the build, just report
        # You'll need to add the OWASP dependency-check plugin to your pom.xml
      
      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: target/dependency-check-report.html
          retention-days: 30
